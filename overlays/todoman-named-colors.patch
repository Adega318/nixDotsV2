diff --git a/tests/test_formatter.py b/tests/test_formatter.py
index f23de73..01c2099 100644
--- a/tests/test_formatter.py
+++ b/tests/test_formatter.py
@@ -9,7 +9,7 @@ from freezegun import freeze_time

 from tests.helpers import pyicu_sensitive
 from todoman.cli import cli
-from todoman.formatters import rgb_to_ansi
+from todoman.formatters import colour_to_ansi


 @pyicu_sensitive
@@ -155,9 +155,11 @@ def test_formatting_parsing_consitency(default_formatter):
     assert default_formatter.parse_datetime(formatted) == dt


-def test_rgb_to_ansi():
-    assert rgb_to_ansi(None) is None
-    assert rgb_to_ansi("#8ab6d") is None
-    assert rgb_to_ansi("#8ab6d2f") == "\x1b[38;2;138;182;210m"
-    assert rgb_to_ansi("red") is None
-    assert rgb_to_ansi("#8ab6d2") == "\x1b[38;2;138;182;210m"
+def test_colour_to_ansi():
+    assert colour_to_ansi(None) is None
+    assert colour_to_ansi("#8ab6d") is None
+    assert colour_to_ansi("#8ab6d2f") == "\x1b[38;2;138;182;210m"
+    assert colour_to_ansi("red") == "\x1b[31m"
+    assert colour_to_ansi("bright cyan") == "\x1b[36;1m"
+    assert colour_to_ansi("rd") is None
+    assert colour_to_ansi("#8ab6d2") == "\x1b[38;2;138;182;210m"
diff --git a/todoman/formatters.py b/todoman/formatters.py
index 1ec179d..bd34cfe 100644
--- a/todoman/formatters.py
+++ b/todoman/formatters.py
@@ -14,8 +14,6 @@ def rgb_to_ansi(colour):
     """
     Convert a string containing an RGB colour to ANSI escapes
     """
-    if not colour or not colour.startswith("#"):
-        return

     r, g, b = colour[1:3], colour[3:5], colour[5:7]

@@ -25,6 +23,30 @@ def rgb_to_ansi(colour):
     return "\33[38;2;{!s};{!s};{!s}m".format(int(r, 16), int(g, 16), int(b, 16))


+def colour_to_ansi(colour):
+    """
+    Convert a string containing a colour (either RGB or a standard colour name)
+    """
+    if not colour:
+        return
+    if colour.startswith("#"):
+        return rgb_to_ansi(colour)
+
+    bright = "bright" in colour
+
+    colour = colour.replace("bright ", "")
+
+    colours = [ "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white" ]
+
+    try:
+        ansi_number = colours.index(colour)
+    except:
+        return
+
+    suffix = ';1' if bright else ""
+    return f"\33[3{ansi_number}{suffix}m"
+
+
 class DefaultFormatter:
     def __init__(
         self,
@@ -206,7 +228,7 @@ class DefaultFormatter:

     def format_database(self, database):
         return "{}@{}".format(
-            rgb_to_ansi(database.colour) or "", click.style(database.name)
+            colour_to_ansi(database.colour) or "", click.style(database.name)
         )


